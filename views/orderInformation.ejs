

<head>

 <!-- Bootstrap Core CSS -->
    <link href="/css/bootstrap.min.css" rel="stylesheet">

    <!-- Custom CSS -->
    <link href="/css/modern-business.css" rel="stylesheet">

    <!-- Custom Fonts -->
<script type="text/javascript" src="http://mbostock.github.com/d3/d3.js?2.1.3"></script>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.geom.js?2.1.3"></script>
    <script type="text/javascript" src="http://mbostock.github.com/d3/d3.layout.js?2.1.3"></script>
<style type="text/css">
        .slice text {
            font-size: 16pt;
            font-family: Arial;
        }   
    </style>


</head>
<body>
<h1>Order Information</h1>

<table class="table">
<tr class="warning">
<th>OrderId</th>
<th>ProductId</th>
<th>Quantity</th>
<th>Total Order Price</th>
<th>OrderDate</th>
<th>ShippingDate</th>
<th>orderStatus</th>
<th>PaymentId</th>
<th>CustomerId</th>
<th>ShipperId</th>

<% for(var i=0; i < data.length; i++) { %>

</tr>
   <tr class="info">
     <td><%= data[i].OrderId %></td>
          <td><%= data[i].ProductId %></td>
     <td><%= data[i].Quantity %></td>
     <td><%= data[i].TotalPrice %></td>


     <td><%= data[i].OrderDate %></td> 		
     <td><%= data[i].ShippingDate %></td>
     <td><%= data[i].orderStatus %></td>
     <td><%= data[i].PaymentId %></td>

     <td><%= data[i].CustomerId %></td>
     <td><%= data[i].ShipperId %></td>
    </tr>
<% } %>
</table>
<h1>Orders according to Product Categories</h1>
 <script type="text/javascript">
    var w = 1000,                        //width
    h = 1000,                            //height
    r = 450,                            //radius
    color = d3.scale.category20c();     //builtin range of colors
    data = [{"label":"Electronics", "value":20}, 
            {"label":"Books & Audible", "value":50}, 
            {"label":"Movies, Music & Games", "value":30},
            {"label":"Beauty and Fasion", "value":40},
            {"label":"Home, Garden & Tools", "value":40}];
    
    var vis = d3.select("body")
        .append("svg:svg")              //create the SVG element inside the <body>
        .data([data])                   //associate our data with the document
            .attr("width", w)           //set the width and height of our visualization (these will be attributes of the <svg> tag
            .attr("height", h)
        .append("svg:g")                //make a group to hold our pie chart
            .attr("transform", "translate(" + r + "," + r + ")")    //move the center of the pie chart from 0, 0 to radius, radius
    var arc = d3.svg.arc()              //this will create <path> elements for us using arc data
        .outerRadius(r);
    var pie = d3.layout.pie()           //this will create arc data for us given a list of values
        .value(function(d) { return d.value; });    //we must tell it out to access the value of each element in our data array
    var arcs = vis.selectAll("g.slice")     //this selects all <g> elements with class slice (there aren't any yet)
        .data(pie)                          //associate the generated pie data (an array of arcs, each having startAngle, endAngle and value properties) 
        .enter()                            //this will create <g> elements for every "extra" data element that should be associated with a selection. The result is creating a <g> for every object in the data array
            .append("svg:g")                //create a group to hold each slice (we will have a <path> and a <text> element associated with each slice)
                .attr("class", "slice");    //allow us to style things in the slices (like text)
        arcs.append("svg:path")
                .attr("fill", function(d, i) { return color(i); } ) //set the color for each slice to be chosen from the color function defined above
                .attr("d", arc);                                    //this creates the actual SVG path using the associated data (pie) with the arc drawing function
        arcs.append("svg:text")                                     //add a label to each slice
                .attr("transform", function(d) {                    //set the label's origin to the center of the arc
                //we have to make sure to set these before calling arc.centroid
                d.innerRadius = 0;
                d.outerRadius = r;
                return "translate(" + arc.centroid(d) + ")";        //this gives us a pair of coordinates like [50, 50]
            })
            .attr("text-anchor", "middle")                          //center the text on it's origin
            .text(function(d, i) { return data[i].label; });        //get the label from our original data array
        
    </script>

</body>
